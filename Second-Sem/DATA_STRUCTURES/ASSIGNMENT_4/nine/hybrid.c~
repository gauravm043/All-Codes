#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

typedef struct list
{
     int group;
     int parent;
}
node;

int n;
node arr[1000];

int findarr(int i)
{
     if(arr[i].parent==i)
	  return i;
     int temp=arr[i].parent;
     int retvalue=findarr(arr[i].parent);
     arr[i].parent=retvalue;
     arr[i].type=(arr[i].type+arr[temp].type)&1;
     return retvalue;
}
void Union(int p1,int p2)
{
     arr[p1].parent=p2;
}

int are_enemy(int x,int y)
{
     a=findarr(u);
     b=findarr(v);
     if(a==b && arr[u].type!=arr[v].type)
	  printf("1\n");
     else 
	  printf("0\n");
}
int are_friend(int x,int y)
{  a=findarr(u);
     b=findarr(v);
     if(a==b && arr[u].type==arr[v].type)
	  printf("1\n");
     else 
	  printf("0\n");
}


void set_friend(int x,int y)
{

     a=findarr(u);
     b=findarr(v);
     if(arr[u].parent==arr[v].parent && arr[u].type!=arr[v].type)
	  printf("-1\n");
     else
     {
	  Union(a,b);
	  arr[a].type=(arr[u].type+arr[v].type)&1;
     }   

}

void set_enemy(int x,int y)
{ 
     a=findarr(u);
     b=findarr(v);
     if(arr[u].type==arr[v].type && arr[u].parent==arr[v].parent)
	  printf("-1\n");
     else
     {
	  Union(a,b);
	  arr[a].type=(arr[u].type+arr[v].type+1)&1;
     }


}




int main()
{
     int ans;
     int i,x,y,c;

     scanf("%d",&n);
     for(i=0;i<=n;i++)
     {
	  arr[i].group=0;
	  arr[i].parent=i;
     }
     while(1)
     {
	  scanf("%d%d%d",&c,&x,&y);
	  if(c==0)
	       return 0;
	  switch(c)
	  {
	       case 1:
		    set_friend(x,y);
		    break;
	       case 2:
		    set_enemy(x,y);
		    break;
	       case 3:
		    ans=are_friend(x,y);
		    printf("%d\n",ans);
		    break;
	       case 4:
		    ans=are_enemy(x,y);
		    printf("%d\n",ans);
		    break;
	  }
     }
}

